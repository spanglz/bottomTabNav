{"version":3,"names":["subscribeForEvents","useScrollViewOffset","aref","offsetRef","useRef","useSharedValue","event","useEvent","current","value","contentOffset","x","y","useEffect","viewTag","findNodeHandle","registerForEvents"],"sources":["useScrollViewOffset.ts"],"sourcesContent":["import { RefObject, useEffect, useRef } from 'react';\n\nimport { findNodeHandle } from 'react-native';\nimport type Animated from 'react-native-reanimated';\nimport { useEvent, useSharedValue } from '.';\nimport { SharedValue } from '../commonTypes';\nimport { ScrollEvent } from './useAnimatedScrollHandler';\n\nconst subscribeForEvents = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n\nexport function useScrollViewOffset(\n  aref: RefObject<Animated.ScrollView>\n): SharedValue<number> {\n  const offsetRef = useRef(useSharedValue(0));\n\n  const event = useEvent<ScrollEvent>((event: ScrollEvent) => {\n    'worklet';\n    offsetRef.current.value =\n      event.contentOffset.x === 0\n        ? event.contentOffset.y\n        : event.contentOffset.x;\n  }, subscribeForEvents);\n\n  useEffect(() => {\n    const viewTag = findNodeHandle(aref.current);\n    event.current?.registerForEvents(viewTag as number);\n  }, [aref.current]);\n\n  return offsetRef.current;\n}\n"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAIA,MAAMA,kBAAkB,GAAG,CACzB,UADyB,EAEzB,mBAFyB,EAGzB,iBAHyB,EAIzB,uBAJyB,EAKzB,qBALyB,CAA3B;;AAQO,SAASC,mBAAT,CACLC,IADK,EAEgB;EACrB,MAAMC,SAAS,GAAG,IAAAC,aAAA,EAAO,IAAAC,gBAAA,EAAe,CAAf,CAAP,CAAlB;EAEA,MAAMC,KAAK,GAAG,IAAAC,UAAA,EAAuBD,KAAD,IAAwB;IAC1D;;IACAH,SAAS,CAACK,OAAV,CAAkBC,KAAlB,GACEH,KAAK,CAACI,aAAN,CAAoBC,CAApB,KAA0B,CAA1B,GACIL,KAAK,CAACI,aAAN,CAAoBE,CADxB,GAEIN,KAAK,CAACI,aAAN,CAAoBC,CAH1B;EAID,CANa,EAMXX,kBANW,CAAd;EAQA,IAAAa,gBAAA,EAAU,MAAM;IAAA;;IACd,MAAMC,OAAO,GAAG,IAAAC,2BAAA,EAAeb,IAAI,CAACM,OAApB,CAAhB;IACA,kBAAAF,KAAK,CAACE,OAAN,kEAAeQ,iBAAf,CAAiCF,OAAjC;EACD,CAHD,EAGG,CAACZ,IAAI,CAACM,OAAN,CAHH;EAKA,OAAOL,SAAS,CAACK,OAAjB;AACD"}