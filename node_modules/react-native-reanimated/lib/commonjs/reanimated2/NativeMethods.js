"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchCommand = dispatchCommand;
exports.getTag = getTag;
exports.measure = measure;
exports.scrollTo = void 0;
exports.setGestureState = setGestureState;

var _reactNative = require("react-native");

var _PlatformChecker = require("./PlatformChecker");

/* global _WORKLET _measure _scrollTo _dispatchCommand _setGestureState */
function getTag(view) {
  return (0, _reactNative.findNodeHandle)(view);
}

const isNative = !(0, _PlatformChecker.shouldBeUseWeb)();

function measure(animatedRef) {
  'worklet';

  if (!_WORKLET || !isNative) {
    console.warn('[Reanimated] measure() cannot be used for web or Chrome Debugger');
    return null;
  }

  const viewTag = animatedRef();

  if (viewTag === -1) {
    console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);
    return null;
  }

  const measured = _measure(viewTag);

  if (measured.x === -1234567) {
    console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response`);
    return null;
  } else if (isNaN(measured.x)) {
    console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \`collapsable={false}\` on this component.`);
    return null;
  } else {
    return measured;
  }
}

function dispatchCommand(animatedRef, commandName, args) {
  'worklet';

  if (!_WORKLET || !isNative) {
    return;
  }

  const shadowNodeWrapper = animatedRef();

  _dispatchCommand(shadowNodeWrapper, commandName, args);
}

let scrollTo;
exports.scrollTo = scrollTo;

if (global._IS_FABRIC) {
  exports.scrollTo = scrollTo = (animatedRef, x, y, animated) => {
    'worklet';

    dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);
  };
} else {
  exports.scrollTo = scrollTo = (animatedRef, x, y, animated) => {
    'worklet';

    if (!_WORKLET || !isNative) {
      return;
    }

    const viewTag = animatedRef();

    _scrollTo(viewTag, x, y, animated);
  };
}

function setGestureState(handlerTag, newState) {
  'worklet';

  if (!_WORKLET || !isNative) {
    console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');
    return;
  }

  _setGestureState(handlerTag, newState);
}
//# sourceMappingURL=NativeMethods.js.map