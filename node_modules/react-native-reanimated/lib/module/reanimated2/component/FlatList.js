function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import { FlatList } from 'react-native';
import ReanimatedView from './View';
import createAnimatedComponent from '../../createAnimatedComponent';
const AnimatedFlatList = createAnimatedComponent(FlatList);

const createCellRenderer = itemLayoutAnimation => {
  const cellRenderer = props => {
    return /*#__PURE__*/React.createElement(ReanimatedView, {
      layout: itemLayoutAnimation,
      onLayout: props.onLayout
    }, props.children);
  };

  return cellRenderer;
};

const ReanimatedFlatlist = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    itemLayoutAnimation,
    ...restProps
  } = props;
  const cellRenderer = React.useMemo(() => createCellRenderer(itemLayoutAnimation), []);
  return /*#__PURE__*/React.createElement(AnimatedFlatList, _extends({
    ref: ref
  }, restProps, {
    CellRendererComponent: cellRenderer
  }));
});
export default ReanimatedFlatlist;
//# sourceMappingURL=FlatList.js.map