{"version":3,"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","useSharedValue","Extrapolate","EXTEND","CLAMP","IDENTITY","interpolateColorsHSV","value","inputRange","colors","h","s","v","interpolateColorsRGB","r","g","b","a","getInterpolateRGB","i","length","color","processedColor","undefined","push","getInterpolateHSV","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"sources":["interpolateColor.ts"],"sourcesContent":["import {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\nimport { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV\n) => {\n  'worklet';\n  const h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB\n) => {\n  'worklet';\n  const r = interpolate(value, inputRange, colors.r, Extrapolate.CLAMP);\n  const g = interpolate(value, inputRange, colors.g, Extrapolate.CLAMP);\n  const b = interpolate(value, inputRange, colors.b, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return rgbaColor(r, g, b, a);\n};\n\ninterface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\ninterface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = RGBtoHSV(processColor(color) as any);\n    if (processedColor) {\n      h.push(processedColor.h);\n      s.push(processedColor.s);\n      v.push(processedColor.v);\n    }\n  }\n  return { h, s, v };\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB'\n): string | number => {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange)\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange)\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB\n): SharedValue<InterpolateConfig> {\n  return useSharedValue({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable(null),\n  });\n}\n\nexport const interpolateSharableColor = (\n  value: number,\n  interpolateConfig: SharedValue<InterpolateConfig>\n): string | number => {\n  'worklet';\n  let colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateRGB\n    );\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateHSV\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"],"mappings":"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"}