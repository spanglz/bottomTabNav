import { useRef } from 'react';
import { useSharedValue } from './useSharedValue';
import { getTag } from '../NativeMethods';
import { getShadowNodeWrapperFromHostInstance } from '../fabricUtils';
export function useAnimatedRef() {
  const tag = useSharedValue(-1);
  const ref = useRef();
  const isFabric = global._IS_FABRIC;

  if (!ref.current) {
    const fun = component => {
      'worklet'; // enters when ref is set by attaching to a component

      if (component) {
        tag.value = isFabric ? getShadowNodeWrapperFromHostInstance(component) : getTag(component);
        fun.current = component;
      }

      return tag.value;
    };

    Object.defineProperty(fun, 'current', {
      value: null,
      writable: true,
      enumerable: false
    });
    ref.current = fun;
  }

  return ref.current;
}
//# sourceMappingURL=useAnimatedRef.js.map